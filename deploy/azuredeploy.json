{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.18.56646",
      "templateHash": "16713646223262934228"
    }
  },
  "parameters": {
    "basename": {
      "type": "string",
      "defaultValue": "fitonfhir",
      "maxLength": 16,
      "minLength": 3,
      "metadata": {
        "description": "Base name that is used to name provisioned resources. Should be alphanumeric and less than 16 characters."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Service prinicipal ID to give permissions for key vaults."
      }
    },
    "google_client_id": {
      "type": "string"
    },
    "google_client_secret": {
      "type": "secureString"
    },
    "spid": {
      "type": "string",
      "metadata": {
        "description": "Service prinicipal ID to give permissions for key vaults."
      }
    },
    "repository_url": {
      "type": "string",
      "defaultValue": "https://github.com/Microsoft/googlefit-on-fhir",
      "metadata": {
        "description": "The repository where the googlefit-on-fhir source code resides."
      }
    },
    "repository_branch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "The source code branch to be deployed"
      }
    },
    "usersKvName": {
      "type": "string",
      "defaultValue": "[format('kv-users-{0}', parameters('basename'))]"
    },
    "infraKvName": {
      "type": "string",
      "defaultValue": "[format('kv-infra-{0}', parameters('basename'))]"
    }
  },
  "variables": {
    "fhirWriterRoleId": "3f88fce4-5892-4214-ae73-ba5294559913",
    "eventHubReceiverRoleId": "a638d3c7-ab3a-418d-83e6-5f17a39d4fde"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[parameters('usersKvName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "accessPolicies": [
          {
            "tenantId": "[reference(resourceId('Microsoft.Web/sites', format('import-data-{0}', parameters('basename'))), '2020-06-01', 'Full').identity.tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', format('import-data-{0}', parameters('basename'))), '2020-06-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "all"
              ]
            }
          },
          {
            "tenantId": "[reference(resourceId('Microsoft.Web/sites', format('import-timer-{0}', parameters('basename'))), '2020-06-01', 'Full').identity.tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', format('import-timer-{0}', parameters('basename'))), '2020-06-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "all"
              ]
            }
          },
          {
            "tenantId": "[reference(resourceId('Microsoft.Web/sites', format('authorize-{0}', parameters('basename'))), '2020-06-01', 'Full').identity.tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', format('authorize-{0}', parameters('basename'))), '2020-06-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "all"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('spid')]",
            "permissions": {
              "secrets": [
                "all"
              ]
            }
          }
        ],
        "tenantId": "[subscription().tenantId]",
        "enableSoftDelete": true,
        "enablePurgeProtection": true,
        "softDeleteRetentionInDays": 30
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('authorize-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites', format('import-data-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites', format('import-timer-{0}', parameters('basename')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[parameters('infraKvName')]",
      "location": "[parameters('location')]",
      "properties": {
        "accessPolicies": [],
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enableSoftDelete": true,
        "enablePurgeProtection": true,
        "softDeleteRetentionInDays": 30
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', parameters('infraKvName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[reference(resourceId('Microsoft.Web/sites', format('import-data-{0}', parameters('basename'))), '2020-06-01', 'full').identity.tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', format('import-data-{0}', parameters('basename'))), '2020-06-01', 'full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[subscription().tenantId]",
            "permissions": {
              "secrets": [
                "all"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('import-data-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('infraKvName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-02-01",
      "name": "[replace(format('sa-{0}', parameters('basename')), '-', '')]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_GRS"
      },
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "blob": {
              "keyType": "Account",
              "enabled": true
            },
            "file": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', ''))]",
      "properties": {
        "changeFeed": {
          "enabled": false
        },
        "restorePolicy": {
          "enabled": false
        },
        "containerDeleteRetentionPolicy": {
          "enabled": true,
          "days": 7
        },
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": true,
          "days": 7
        },
        "isVersioningEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', ''))]",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', ''))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/{1}/{2}', split(format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', '')), '/')[0], split(format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', '')), '/')[1], 'import-data')]",
      "properties": {
        "metadata": {}
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/queueServices', split(format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', '')), '/')[0], split(format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', '')), '/')[1])]",
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', ''))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/{1}/{2}', split(format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', '')), '/')[0], split(format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', '')), '/')[1], 'users')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/tableServices', split(format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', '')), '/')[0], split(format('{0}/default', replace(format('sa-{0}', parameters('basename')), '-', '')), '/')[1])]",
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', parameters('infraKvName'), 'queue-connection-string')]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', replace(format('sa-{0}', parameters('basename')), '-', ''), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', '')), '2021-02-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('infraKvName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', parameters('infraKvName'), 'eventhub-connection-string')]",
      "properties": {
        "value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', format('en-{0}', parameters('basename')), 'ingest', 'FunctionSender'), '2021-01-01-preview').primaryConnectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', format('en-{0}', parameters('basename')), 'ingest', 'FunctionSender')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('infraKvName'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[format('la-{0}', parameters('basename'))]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('ai-{0}', parameters('basename'))]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', parameters('basename')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', parameters('basename')))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-10-01",
      "name": "[format('app-plan-{0}', parameters('basename'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[format('authorize-{0}', parameters('basename'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "enabled": true,
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('app-plan-{0}', parameters('basename')))]",
        "reserved": false,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('app-plan-{0}', parameters('basename')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2015-08-01",
      "name": "[format('{0}/{1}', format('authorize-{0}', parameters('basename')), 'appsettings')]",
      "location": "[parameters('location')]",
      "properties": {
        "FUNCTIONS_EXTENSION_VERSION": "~4",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "PROJECT": "src/Authorization/FitOnFhir.Authorization/FitOnFhir.Authorization.csproj",
        "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', replace(format('sa-{0}', parameters('basename')), '-', ''), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', '')), '2021-02-01').keys[0].value)]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))).InstrumentationKey]",
        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))).ConnectionString]",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', replace(format('sa-{0}', parameters('basename')), '-', ''), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', '')), '2021-02-01').keys[0].value)]",
        "WEBSITE_CONTENTSHARE": "[format('authorize-{0}-{1}', parameters('basename'), take(uniqueString('authorize-', parameters('basename')), 4))]",
        "GOOGLE_OAUTH_CLIENT_ID": "[parameters('google_client_id')]",
        "GOOGLE_OAUTH_CLIENT_SECRET": "[parameters('google_client_secret')]",
        "USERS_KEY_VAULT_URI": "[format('https://{0}{1}', parameters('usersKvName'), environment().suffixes.keyvaultDns)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites', format('authorize-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', format('authorize-{0}', parameters('basename')), 'web')]",
      "properties": {
        "repoUrl": "[parameters('repository_url')]",
        "branch": "[parameters('repository_branch')]",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('authorize-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites/config', format('authorize-{0}', parameters('basename')), 'appsettings')]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[format('import-timer-{0}', parameters('basename'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "enabled": true,
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('app-plan-{0}', parameters('basename')))]",
        "reserved": false,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('app-plan-{0}', parameters('basename')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2015-08-01",
      "name": "[format('{0}/{1}', format('import-timer-{0}', parameters('basename')), 'appsettings')]",
      "location": "[parameters('location')]",
      "properties": {
        "FUNCTIONS_EXTENSION_VERSION": "~4",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "PROJECT": "src/ImportTimerTrigger/FitOnFhir.ImportTimerTrigger/FitOnFhir.ImportTimerTrigger.csproj",
        "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', replace(format('sa-{0}', parameters('basename')), '-', ''), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', '')), '2021-02-01').keys[0].value)]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))).InstrumentationKey]",
        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))).ConnectionString]",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', replace(format('sa-{0}', parameters('basename')), '-', ''), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', '')), '2021-02-01').keys[0].value)]",
        "WEBSITE_CONTENTSHARE": "[format('import-timer-{0}-{1}', parameters('basename'), take(uniqueString('import-timer-', parameters('basename')), 4))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites', format('authorize-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites', format('import-timer-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', format('import-timer-{0}', parameters('basename')), 'web')]",
      "properties": {
        "repoUrl": "[parameters('repository_url')]",
        "branch": "[parameters('repository_branch')]",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('import-timer-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites/config', format('import-timer-{0}', parameters('basename')), 'appsettings')]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[format('import-data-{0}', parameters('basename'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "enabled": true,
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('app-plan-{0}', parameters('basename')))]",
        "reserved": false,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('app-plan-{0}', parameters('basename')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2015-08-01",
      "name": "[format('{0}/{1}', format('import-data-{0}', parameters('basename')), 'appsettings')]",
      "location": "[parameters('location')]",
      "properties": {
        "FUNCTIONS_EXTENSION_VERSION": "~4",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "PROJECT": "src/Import/FitOnFhir.Import/FitOnFhir.Import.csproj",
        "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', replace(format('sa-{0}', parameters('basename')), '-', ''), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', '')), '2021-02-01').keys[0].value)]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))).InstrumentationKey]",
        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))).ConnectionString]",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', replace(format('sa-{0}', parameters('basename')), '-', ''), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', '')), '2021-02-01').keys[0].value)]",
        "WEBSITE_CONTENTSHARE": "[format('import-data-{0}-{1}', parameters('basename'), take(uniqueString('import-data-', parameters('basename')), 4))]",
        "EventHubConnectionString": "[format('@Microsoft.KeyVault(SecretUri={0})', reference(resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/eventhub-connection-string', parameters('infraKvName')), '/')[0], split(format('{0}/eventhub-connection-string', parameters('infraKvName')), '/')[1])).secretUriWithVersion)]",
        "GOOGLE_OAUTH_CLIENT_ID": "[parameters('google_client_id')]",
        "GOOGLE_OAUTH_CLIENT_SECRET": "[parameters('google_client_secret')]",
        "USERS_KEY_VAULT_URI": "[format('https://{0}{1}', parameters('usersKvName'), environment().suffixes.keyvaultDns)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites', format('import-data-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('infraKvName'), 'eventhub-connection-string')]",
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', format('import-data-{0}', parameters('basename')), 'web')]",
      "properties": {
        "repoUrl": "[parameters('repository_url')]",
        "branch": "[parameters('repository_branch')]",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('import-data-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Web/sites/config', format('import-data-{0}', parameters('basename')), 'appsettings')]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-01-01-preview",
      "name": "[format('en-{0}', parameters('basename'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard",
        "capacity": 2
      },
      "properties": {
        "zoneRedundant": true,
        "isAutoInflateEnabled": true,
        "maximumThroughputUnits": 8,
        "kafkaEnabled": false
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-01-01-preview",
      "name": "[format('{0}/{1}', format('en-{0}', parameters('basename')), 'ingest')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 4
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', format('en-{0}', parameters('basename')))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2021-01-01-preview",
      "name": "[format('{0}/{1}/{2}', format('en-{0}', parameters('basename')), 'ingest', '$Default')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', format('en-{0}', parameters('basename')), 'ingest')]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2021-01-01-preview",
      "name": "[format('{0}/{1}/{2}', format('en-{0}', parameters('basename')), 'ingest', 'FunctionSender')]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', format('en-{0}', parameters('basename')), 'ingest')]"
      ]
    },
    {
      "type": "Microsoft.HealthcareApis/workspaces",
      "apiVersion": "2021-06-01-preview",
      "name": "[replace(format('hw-{0}', parameters('basename')), '-', '')]",
      "location": "[parameters('location')]",
      "properties": {}
    },
    {
      "type": "Microsoft.HealthcareApis/workspaces/fhirservices",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename'))]",
      "location": "[parameters('location')]",
      "kind": "fhir-R4",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "authenticationConfiguration": {
          "authority": "[format('{0}{1}', environment().authentication.loginEndpoint, subscription().tenantId)]",
          "audience": "[format('https://{0}-fs-{1}.fhir.azurehealthcareapis.com', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename'))]",
          "smartProxyEnabled": false
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces', replace(format('hw-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.HealthcareApis/workspaces/iotconnectors",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename'))]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "ingestionEndpointConfiguration": {
          "eventHubName": "ingest",
          "consumerGroup": "$Default",
          "fullyQualifiedEventHubNamespace": "[format('en-{0}.servicebus.windows.net', parameters('basename'))]"
        },
        "deviceMapping": {
          "content": {
            "templateType": "CollectionContent",
            "template": [
              {
                "templateType": "CalculatedContent",
                "template": {
                  "typeName": "com.google.blood_glucose",
                  "typeMatchExpression": "$..[?(@dataTypeName == 'com.google.blood_glucose' && $.dataSourceId =~ /com.google.android.apps.fitness/)]",
                  "deviceIdExpression": "$.deviceIdentifier",
                  "patientIdExpression": "$.patientIdentifier",
                  "timestampExpression": {
                    "value": "fromUnixTimestampMs(ceil(multiply(matchedToken.endTimeNanos, `0.000001`)))",
                    "language": "JmesPath"
                  },
                  "values": [
                    {
                      "required": "true",
                      "valueExpression": "matchedToken.value[0].fpVal",
                      "valueName": "blood_glucose_level"
                    },
                    {
                      "required": "false",
                      "valueExpression": "matchedToken.value[1].intVal",
                      "valueName": "temporal_relation_to_meal"
                    },
                    {
                      "required": "false",
                      "valueExpression": "matchedToken.value[2].intVal",
                      "valueName": "meal_type"
                    },
                    {
                      "required": "false",
                      "valueExpression": "matchedToken.value[3].intVal",
                      "valueName": "temporal_relation_to_sleep"
                    },
                    {
                      "required": "false",
                      "valueExpression": "matchedToken.value[4].intVal",
                      "valueName": "blood_glucose_specimen_source"
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', format('en-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', format('en-{0}', parameters('basename')), 'ingest')]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/consumergroups', format('en-{0}', parameters('basename')), 'ingest', '$Default')]",
        "[resourceId('Microsoft.HealthcareApis/workspaces', replace(format('hw-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/fhirservices/{1}', split(format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1])]",
      "name": "[guid(format('{0}-FhirWriter', resourceGroup().id))]",
      "properties": {
        "roleDefinitionId": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().id, variables('fhirWriterRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1]), '2021-06-01-preview', 'Full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces/fhirservices', split(format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1])]",
        "[resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', format('en-{0}', parameters('basename')), 'ingest')]",
      "name": "[guid(format('{0}-EventHubDataReceiver', resourceGroup().id))]",
      "properties": {
        "roleDefinitionId": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().id, variables('eventHubReceiverRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1]), '2021-06-01-preview', 'Full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', format('en-{0}', parameters('basename')), 'ingest')]",
        "[resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.HealthcareApis/workspaces/iotconnectors/fhirdestinations",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}/{2}', split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1], format('hd-{0}', parameters('basename')))]",
      "location": "[parameters('location')]",
      "properties": {
        "resourceIdentityResolutionType": "Create",
        "fhirServiceResourceId": "[resourceId('Microsoft.HealthcareApis/workspaces/fhirservices', split(format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1])]",
        "fhirMapping": {
          "content": {
            "templateType": "CollectionFhir",
            "template": [
              {
                "templateType": "CodeValueFhir",
                "template": {
                  "typeName": "com.google.blood_glucose",
                  "value": {
                    "valueName": "blood_glucose_level",
                    "valueType": "Quantity",
                    "unit": "mmol/L",
                    "system": "http://loinc.org"
                  },
                  "codes": []
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces', replace(format('hw-{0}', parameters('basename')), '-', ''))]",
        "[resourceId('Microsoft.HealthcareApis/workspaces/fhirservices', split(format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/fs-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1])]",
        "[resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[0], split(format('{0}/hi-{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename')), '/')[1])]"
      ]
    }
  ],
  "outputs": {
    "usersKeyVaultName": {
      "type": "string",
      "value": "[parameters('usersKvName')]"
    },
    "infraKeyVaultName": {
      "type": "string",
      "value": "[parameters('infraKvName')]"
    },
    "authorizeAppName": {
      "type": "string",
      "value": "[format('authorize-{0}', parameters('basename'))]"
    },
    "importTimerAppName": {
      "type": "string",
      "value": "[format('import-timer-{0}', parameters('basename'))]"
    },
    "importDataAppName": {
      "type": "string",
      "value": "[format('import-data-{0}', parameters('basename'))]"
    }
  }
}