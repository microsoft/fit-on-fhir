parameters:
  - name: displayName
  - name: azureSubscription
  - name: resourceGroupName
  - name: location
  - name: overrideParameters
  - name: armFile
  - name: deploymentName
    default: ''


steps:
  - task: AzureCLI@2
    name: getObjectId
    displayName: Get SP ID
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        objectId=$(az ad sp show \
          --id $(az account show --query "user.name" -o tsv) \
          --query "objectId" -o tsv)
        echo "##vso[task.setvariable variable=objectId;isOutput=true]$objectId"

  - task: AzureResourceGroupDeployment@2
    displayName: ${{ parameters.displayName }}
    inputs:
      action: Create Or Update Resource Group
      azureSubscription: ${{ parameters.azureSubscription }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      location: ${{ parameters.location }}
      overrideParameters: >
        ${{ parameters.overrideParameters }}
        -spid $(getObjectId.objectId)
      deploymentMode: Incremental
      templateLocation: Linked artifact
      csmFile: ${{ parameters.armFile }}
      deploymentOutputs: armOutput
      deploymentName: ${{ parameters.deploymentName }}

  - pwsh: |
      $object=$env:OUTPUT | ConvertFrom-Json
      $object.PSObject.Properties | ForEach-Object {
        echo "Found Key: $($_.Name)"
        echo "Use in same job: outputVars.$($_.Name)"
        echo "Use in dependent job: $[dependencies.EphemeralDeploy.outputs['outputVars.$($_.Name)']"
        echo "Use in dependent stage: $[stageDependencies.EphemeralDeploy.outputs['outputVars.$($_.Name)']"
        echo "##vso[task.setvariable variable=$($_.Name);$env:VARSETTINGS]$($_.Value.value)"
      }
    name: outputVars
    displayName: Parse ARM outputs
    env:
      output: $(armOutput)
      varSettings: isOutput=true
