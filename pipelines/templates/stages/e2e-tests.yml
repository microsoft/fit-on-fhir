parameters:
  - name: environment
    default: ''

stages:
  - stage: E2ETests
    displayName: E2ETests
    dependsOn: [DurableDeploy]
    variables:
      - template: ../variables/${{ parameters.environment }}.yml
    jobs:
      - job: AuthToGFit
        displayName: Auth to Google Fit
        variables:
          - name: GFIT_REFRESH_TOKEN
            value: $[ stageDependencies.DurableDeploy.DeployResources.outputs['copyRefreshToken.TOKEN'] ]
          - name: GFIT_CLIENT_ID
            value: $(gfit-google-client-id)
          - name: GFIT_CLIENT_SECRET
            value: $(gfit-google-client-secret)
        steps:
          - task: Bash@3
            name: GetAccessToken
            displayName: Get Access Token
            inputs:
              targetType: inlineScript
              script: |
                FORM_DATA="grant_type=refresh_token"
                FORM_DATA+="&refresh_token=$(GFIT_REFRESH_TOKEN)"
                FORM_DATA+="&client_id=$(GFIT_CLIENT_ID)"
                FORM_DATA+="&client_secret=$(GFIT_CLIENT_SECRET)"
                CURL_RESPONSE=$(curl -X POST https://oauth2.googleapis.com/token \
                 -H "Content-type: application/x-www-form-urlencoded" -d "$FORM_DATA")
                GFIT_ACCESS_TOKEN=$(echo $CURL_RESPONSE | jq -r '.access_token')
                varSettings=isOutput=true;isSecret=true
                echo "##vso[task.setvariable variable=GFIT_ACCESS_TOKEN;$varSettings]$GFIT_ACCESS_TOKEN"
      - job: SeedNewUserData
        displayName: Seed New User Data
        dependsOn: AuthToGFit
        variables:
          - name: GFIT_ACCESS_TOKEN
            value: $[ dependencies.AuthToGFit.outputs['GetAccessToken.GFIT_ACCESS_TOKEN'] ]
        steps:
          - task: Bash@3
            displayName: Create GFit DataSource
            inputs:
              targetType: inlineScript
              script: |
                curl --request POST 'https://www.googleapis.com/fitness/v1/users/me/dataSources' \
                --header 'Authorization: Bearer "$(GFIT_ACCESS_TOKEN)"' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "dataStreamName": "BloodGlucose2",
                    "type": "raw",
                    "application": {
                      "detailsUrl": "https://example.com",
                      "name": "TestGlucoseApp",
                      "version": "1"
                    },
                    "dataType": {
                    "name": "com.google.blood_glucose" 
                    }
                  }'
          - task: Bash@3
            displayName: Upload Initial Test Data
            inputs:
              targetType: inlineScript
              script: |
                echo "Placeholder - Upload some data points from the past month to the newly created datasource"
      - job: InitialDataMigrationTest
        displayName: Initial Data Migration Test (Prior Month)
        dependsOn: SeedNewUserData
        steps:
          - task: Bash@3
            displayName: Wait For PublishData
            inputs:
              targetType: inlineScript
              script: |
                echo "Placeholder - Wait for sync + publish function to run"
          - task: Bash@3
            displayName: Verify Initial Data Migration
            inputs:
              targetType: inlineScript
              script: |
                echo "Placeholder - Verify that the initial data was synced to FHIR server"
      - job: NewDataMigrationTest
        displayName: New Data Migration Test (Interval Since Last Sync)
        dependsOn: InitialDataMigrationTest
        steps:
          - task: Bash@3
            displayName: Upload Interval Test Data
            inputs:
              targetType: inlineScript
              script: |
                echo "Placeholder - Upload additional data points with current timestamp to datasource"
          - task: Bash@3
            displayName: Wait For PublishData
            inputs:
              targetType: inlineScript
              script: |
                echo "Placeholder - Wait for sync + publish function to run"
          - task: Bash@3
            displayName: Verify Interval Data Migration
            inputs:
              targetType: inlineScript
              script: |
                echo "Placeholder - Verify that the new interval data was synced to FHIR server"
      - job: E2ECleanup
        displayName: E2E Cleanup
        dependsOn: NewDataMigrationTest
        steps:
          - task: Bash@3
            displayName: Delete Datasource for Test User
            inputs:
              targetType: inlineScript
              script: |
                echo "Placeholder - Delete DataSource for GFit test user"
          - task: Bash@3
            displayName: Move Updated Refresh Token to Durable KV
            inputs:
              targetType: inlineScript
              script: |
                echo "Placeholder - Move updated refresh token from PublishData back to durable kv"
