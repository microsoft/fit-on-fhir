{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.451.19169",
      "templateHash": "10319203682102741527"
    }
  },
  "parameters": {
    "basename": {
      "type": "string",
      "defaultValue": "fitonfhir",
      "maxLength": 16,
      "minLength": 3,
      "metadata": {
        "description": "Base name that is used to name provisioned resources. Should be alphanumeric and less than 16 characters."
      }
    }
  },
  "functions": [],
  "variables": {
    "fhirWriterRoleId": "3f88fce4-5892-4214-ae73-ba5294559913",
    "eventHubReceiverRoleId": "a638d3c7-ab3a-418d-83e6-5f17a39d4fde"
  },
  "resources": [
    {
      "type": "Microsoft.HealthcareApis/workspaces",
      "apiVersion": "2021-06-01-preview",
      "name": "[replace(format('hw-{0}', parameters('basename')), '-', '')]",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.HealthcareApis/workspaces/iotconnectors",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), 'iot-connector')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "ingestionEndpointConfiguration": {
          "eventHubName": "ingest",
          "fullyQualifiedEventHubNamespace": "[format('{0}.servicebus.windows.net', format('en-{0}', parameters('basename')))]",
          "consumerGroup": "$Default"
        },
        "deviceMapping": {
          "content": {
            "templateType": "CollectionContent",
            "template": [
              {
                "templateType": "JsonPathContent",
                "template": {
                  "typeName": "bloodglucose",
                  "typeMatchExpression": "$..[?(@.point[0].value[0].fpVal)]",
                  "timestampExpression": "$.point[0].endTimeISO8601",
                  "deviceIdExpression": "$.dataSourceId",
                  "patientIdExpression": "$.userId",
                  "values": [
                    {
                      "valueName": "Blood Glucose",
                      "valueExpression": "$.point[0].value[0].fpVal",
                      "required": true
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces', replace(format('hw-{0}', parameters('basename')), '-', ''))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', format('en-{0}', parameters('basename')), 'ingest')]",
        "[resourceId('Microsoft.EventHub/namespaces', format('en-{0}', parameters('basename')))]"
      ]
    },
    {
      "type": "Microsoft.HealthcareApis/workspaces/iotconnectors/destinations",
      "apiVersion": "2020-11-01-preview",
      "name": "[format('{0}/{1}/{2}', replace(format('hw-{0}', parameters('basename')), '-', ''), 'iot-connector', 'dest1')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "destinationType": "FhirServer",
        "resourceIdentityResolutionType": "Create",
        "fhirServiceResourceId": "[resourceId('Microsoft.HealthcareApis/workspaces/fhirservices', replace(format('hw-{0}', parameters('basename')), '-', ''), format('hs-{0}', parameters('basename')))]",
        "fhirMapping": {
          "content": {
            "templateType": "CollectionFhir",
            "template": [
              {
                "templateType": "CodeValueFhir",
                "template": {
                  "typeName": "bloodglucose",
                  "value": {
                    "valueName": "Blood Glucose",
                    "valueType": "Quantity",
                    "defaultPeriod": "5000",
                    "unit": "mmol/L",
                    "system": "http://loinc.org"
                  },
                  "codes": []
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces/fhirservices', replace(format('hw-{0}', parameters('basename')), '-', ''), format('hs-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.HealthcareApis/workspaces', replace(format('hw-{0}', parameters('basename')), '-', ''))]",
        "[resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', replace(format('hw-{0}', parameters('basename')), '-', ''), 'iot-connector')]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-01-01-preview",
      "name": "[format('en-{0}', parameters('basename'))]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Basic",
        "tier": "Basic",
        "capacity": 1
      },
      "properties": {
        "zoneRedundant": true
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-01-01-preview",
      "name": "[format('{0}/{1}', format('en-{0}', parameters('basename')), 'ingest')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 2
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', format('en-{0}', parameters('basename')))]"
      ]
    },
    {
      "type": "Microsoft.HealthcareApis/workspaces/fhirservices",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), format('hs-{0}', parameters('basename')))]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "kind": "fhir-R4",
      "properties": {
        "authenticationConfiguration": {
          "audience": "[format('https://{0}-ha-{1}.azurehealthcareapis.com', replace(format('hw-{0}', parameters('basename')), '-', ''), parameters('basename'))]",
          "authority": "[uri(environment().authentication.loginEndpoint, subscription().tenantId)]",
          "smartProxyEnabled": false
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces', replace(format('hw-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/fhirservices/{1}', replace(format('hw-{0}', parameters('basename')), '-', ''), format('hs-{0}', parameters('basename')))]",
      "name": "[guid(format('{0}-FhirWriter', resourceGroup().id))]",
      "properties": {
        "roleDefinitionId": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().id, variables('fhirWriterRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', replace(format('hw-{0}', parameters('basename')), '-', ''), 'iot-connector'), '2021-06-01-preview', 'full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces/fhirservices', replace(format('hw-{0}', parameters('basename')), '-', ''), format('hs-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', replace(format('hw-{0}', parameters('basename')), '-', ''), 'iot-connector')]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', format('en-{0}', parameters('basename')), 'ingest')]",
      "name": "[guid(format('{0}-EventHubDataReceiver', resourceGroup().id))]",
      "properties": {
        "roleDefinitionId": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().id, variables('eventHubReceiverRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', replace(format('hw-{0}', parameters('basename')), '-', ''), 'iot-connector'), '2021-06-01-preview', 'full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', replace(format('hw-{0}', parameters('basename')), '-', ''), 'iot-connector')]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', format('en-{0}', parameters('basename')), 'ingest')]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[format('kv-users-{0}', parameters('basename'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[subscription().tenantId]",
            "permissions": {
              "secrets": [
                "all"
              ]
            }
          }
        ],
        "tenantId": "[subscription().tenantId]",
        "enableSoftDelete": true,
        "enablePurgeProtection": true,
        "softDeleteRetentionInDays": 30
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[format('kv-infra-{0}', parameters('basename'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[subscription().tenantId]",
            "permissions": {
              "secrets": [
                "all"
              ]
            }
          }
        ],
        "tenantId": "[subscription().tenantId]",
        "enableSoftDelete": true,
        "enablePurgeProtection": true,
        "softDeleteRetentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-02-01",
      "name": "[replace(format('sa-{0}', parameters('basename')), '-', '')]",
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_GRS"
      },
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/{1}', replace(format('sa-{0}', parameters('basename')), '-', ''), 'default')]",
      "properties": {
        "changeFeed": {
          "enabled": false
        },
        "restorePolicy": {
          "enabled": false
        },
        "containerDeleteRetentionPolicy": {
          "enabled": true,
          "days": 7
        },
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": true,
          "days": 7
        },
        "isVersioningEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/{1}', replace(format('sa-{0}', parameters('basename')), '-', ''), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/{1}/{2}', replace(format('sa-{0}', parameters('basename')), '-', ''), 'default', 'google-fit-users')]",
      "properties": {
        "metadata": {}
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/queueServices', replace(format('sa-{0}', parameters('basename')), '-', ''), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/{1}', replace(format('sa-{0}', parameters('basename')), '-', ''), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/{1}/{2}', replace(format('sa-{0}', parameters('basename')), '-', ''), 'default', 'users')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]",
        "[resourceId('Microsoft.Storage/storageAccounts/tableServices', replace(format('sa-{0}', parameters('basename')), '-', ''), 'default')]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/queue-connection-string', format('kv-infra-{0}', parameters('basename')))]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', replace(format('sa-{0}', parameters('basename')), '-', ''), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', '')), '2021-02-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('kv-infra-{0}', parameters('basename')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', replace(format('sa-{0}', parameters('basename')), '-', ''))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[format('la-{0}', parameters('basename'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('ai-{0}', parameters('basename'))]",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', parameters('basename')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', parameters('basename')))]"
      ]
    }
  ],
  "outputs": {
    "usersKeyVaultName": {
      "type": "string",
      "value": "[format('kv-users-{0}', parameters('basename'))]"
    },
    "infraKeyVaultName": {
      "type": "string",
      "value": "[format('kv-infra-{0}', parameters('basename'))]"
    }
  }
}